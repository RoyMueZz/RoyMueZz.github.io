<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[基于vuecli3.0脚手架项目工程的搭建]]></title>
    <url>%2FRoyMueZz.github.io%2F%E5%9F%BA%E4%BA%8Evuecli3-0%E8%84%9A%E6%89%8B%E6%9E%B6%E9%A1%B9%E7%9B%AE%E5%B7%A5%E7%A8%8B%E7%9A%84%E6%90%AD%E5%BB%BA.html</url>
    <content type="text"><![CDATA[文件目录展示 api123// book.jsimport _axios from "./index";export const book = params =&gt; _axios("get", "/book/ebook", params); 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657// index.jsimport axios from "axios"; // 创建axios的一个实例var instance = axios.create(&#123; baseURL: process.env.VUE_APP_BASE_URL, // 环境变量 timeout: 6000&#125;);// 一、请求拦截器instance.interceptors.request.use( function(config) &#123; return config; &#125;, function(error) &#123; // 对请求错误做些什么 return Promise.reject(error); &#125;);// 二、响应拦截器instance.interceptors.response.use( function(response) &#123; return response.data; &#125;, function(error) &#123; // 对响应错误做点什么 return Promise.reject(error); &#125;);/** * 使用es6的export default导出了一个函数，导出的函数代替axios去帮我们请求数据， * 函数的参数及返回值如下： * @param &#123;String&#125; method 请求的方法：get、post、delete、put * @param &#123;String&#125; url 请求的url: * @param &#123;Object&#125; data 请求的参数 * @returns &#123;Promise&#125; 返回一个promise对象，其实就相当于axios请求数据的返回值 */export default function(method, url, data = null) &#123; method = method.toLowerCase(); if (method == "post") &#123; return instance.post(url, data); &#125; else if (method == "get") &#123; return instance.get(url, &#123; params: data &#125;); &#125; else if (method == "delete") &#123; return instance.delete(url, &#123; params: data &#125;); &#125; else if (method == "put") &#123; return instance.put(url, data); &#125; else &#123; console.error("未知的method" + method); return false; &#125;&#125; 12345678910111213141516171819202122&lt;!-- 使用 --&gt;&lt;script&gt;import &#123; book &#125; from '@/api/book'export default &#123; name: 'app', mounted() &#123; this.books() &#125;, methods: &#123; async books() &#123; //book()执行完, //book_info let book_info = await book() console.log(book_info); //2.2假设登录成功,返回的数据应该是 //book_info=&#123;code:200,msg:'success',data:[]&#125; // 等右边有返回值时，才会继续执行代码 &#125; &#125;&#125;&lt;/script&gt; components global/fa-button 123// index.jsimport faButton from "./index.vue";export default faButton; 123456789101112&lt;!-- index.vue --&gt;&lt;template&gt; &lt;div&gt;test component&lt;/div&gt;&lt;/template&gt;&lt;script&gt;export default &#123; name:'faButton' // 全局注册的需要定义name值，作为组件的名字&#125;&lt;/script&gt;&lt;style lang="less" scoped&gt;&lt;/style&gt; index.js : 自动加载 global 目录下的 .js 结尾的文件, 来实现自动注册组件目的 12345678910111213// index.jsimport Vue from 'vue'// 自动加载 global 目录下的 .js 结尾的文件const componentsContext = require.context('./global', true, /\.js$/)componentsContext.keys().forEach(component =&gt; &#123; const componentConfig = componentsContext(component) /** * 兼容 import export 和 require module.export 两种规范 */ const ctrl = componentConfig.default || componentConfig Vue.component(ctrl.name, ctrl) 12// main.jsimport '@/components' // 全局组件自动注册 123456&lt;!-- 使用组件 --&gt;&lt;template&gt; &lt;div&gt; &lt;fa-button&gt;&lt;/fa-button&gt; &lt;/div&gt;&lt;/template&gt; router123456789101112// Home/index.jsexport default [ &#123; path:'/', redirect:'/home' &#125;, &#123; path: '/home', name: 'home', component: () =&gt; import(/* webpackChunkName: "index" */ '@/views/Home') &#125;] 12345678910111213141516171819202122232425// index.jsimport Vue from "vue";import Router from "vue-router";Vue.use(Router);let routes = [];// 自动解析 ./ 目录下的 index.js 文件 自动引入该文件中const routerContext = require.context("./", true, /index\.js$/);routerContext.keys().forEach(route =&gt; &#123; // 如果是根目录的 index.js 不处理 if(route.startsWith('./index'))&#123; return &#125; const routerModule = routerContext(route) /** * 兼容 import export 和 require module.export 两种规范 */ routes = [...routes,...(routerModule.default || routerModule)]&#125;)export default new Router(&#123; routes&#125;); store 123456789101112131415161718192021// modules/book.jsconst book = &#123; state: &#123; test: 1 &#125;, actions: &#123; setTest: (&#123; commit, state &#125;, newTest) =&gt; &#123; return commit("SET_TEST", newTest); &#125; &#125;, mutations: &#123; 'SET_TEST': (state, newTest) =&gt; &#123; state.test = newTest; &#125; &#125;, getters: &#123; book: state =&gt; state.test &#125;&#125;;export default book 12345678910111213// index.jsimport Vue from "vue";import Vuex from "vuex";import book from "./modules/book"Vue.use(Vuex);export default new Vuex.Store(&#123; modules:&#123; book &#125;&#125;) 1234567891011121314151617181920212223&lt;!-- 使用 --&gt;&lt;script&gt;// 这样会写很多重复代码而且不方便维护，后面使用mixin的方法统一管理import &#123; mapGetters &#125; from 'vuex'import &#123; mapActions &#125; from 'vuex'// import &#123; ebookMixin &#125; from '@/utils/mixin' export default &#123; name: 'app', // mixins: [ebookMixin], // mixin以当前代码进行混合，减少重复代码 computed: &#123; ...mapGetters(['book']) &#125;, created() &#123; // 提交参数10之后,返回的是promise对象, 来获取 book 的值 this.setTest(10).then(() =&gt; &#123; console.log(this.book); // 获取vuex中book的值 &#125;) &#125;, methods: &#123; ...mapActions(['setTest']) // 这样写就可以简化提交操作，这种提交vuex数据需要在methods中才能生效 &#125;&#125;&lt;/script&gt; utils12345678910//book.js 存放某个模块下的静态变量export const FONT_SIZE_LIST = [ &#123; fontSize: 12 &#125;, &#123; fontSize: 14 &#125;, &#123; fontSize: 16 &#125;, &#123; fontSize: 18 &#125;, &#123; fontSize: 20 &#125;, &#123; fontSize: 22 &#125;, &#123; fontSize: 24 &#125;]; npm install web-storage-cache -S 1234567891011121314151617181920// localStorage.js 引入第三方库(进行超时处理，序列化)import Storage from "web-storage-cache";const localStorage = new Storage();export function setLocalStorage(key, value) &#123; return localStorage.set(key, value);&#125;export function getLocalStorage(key) &#123; return localStorage.get(key);&#125;export function removeLocalStorage(key) &#123; return localStorage.delete(key);&#125;export function clearLocalStorage() &#123; return localStorage.clear();&#125; 123456789101112131415/** * mixin.js 复用的方法放在 mixin 里，尽量让单个组件的代码精简 * */import &#123; mapGetters, mapActions &#125; from "vuex";export const ebookMixin = &#123; computed: &#123; ...mapGetters(["book"]) &#125;, methods: &#123; ...mapActions(['setTest']) &#125;,&#125;; 123456789101112131415161718&lt;!-- 使用 --&gt;&lt;script&gt;import &#123; FONT_SIZE_LIST &#125; from '@/utils/book'import &#123; ebookMixin &#125; from '@/utils/mixin'import &#123; setLocalStorage &#125; from '@/utils/localStorage' // localStorage引入第三方库export default &#123; name: 'app', mixins: [ebookMixin], // mixin以当前代码进行混合，减少重复代码 data() &#123; return &#123; aFontSize: FONT_SIZE_LIST &#125; &#125;, created() &#123; setLocalStorage('test', &#123; name: 1 &#125;) &#125;&#125;&lt;/script&gt; mocknpm install mockjs -D 12345678 // book.js 存放数据文件 module.exports = &#123; list:[ &#123;"name":"肖申克的救赎"&#125;, &#123;"name":"狼性"&#125;, &#123;"name":"弟子规"&#125; ]&#125; 123456 // index.js import Mock from 'mockjs'import book from './book'Mock.mock(/\/book\/ebook/,'get',book) 123456789// main.jsimport './mock' new Vue(&#123; router, i18n, store, render: h =&gt; h(App)&#125;).$mount("#app"); langnpm install vue-i18n -S 1234567891011// cn.js 存放数据文件const messages = &#123; home:&#123; title:'书城' &#125;, book:&#123; title:'书名' &#125;&#125;export default messages 123456789101112131415161718192021 // index.js import Vue from 'vue'import VueI18N from 'vue-i18n'import cn from './cn'Vue.use(VueI18N)const messages = &#123; cn&#125;const locale = 'cn'const i18n = new VueI18N(&#123; locale, messages&#125;) export default i18n 1234567891011// main.jsimport i18n from './lang' // 国际化 Vue.config.productionTip = false;new Vue(&#123; router, i18n, store, render: h =&gt; h(App)&#125;).$mount("#app"); 12&lt;!-- 使用 --&gt;&lt;router-link to="/"&gt;&#123;&#123;$t('home.title')&#125;&#125;&lt;/router-link&gt;|]]></content>
      <tags>
        <tag>vue</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[工具函数]]></title>
    <url>%2FRoyMueZz.github.io%2F%E5%B7%A5%E5%85%B7%E5%87%BD%E6%95%B0.html</url>
    <content type="text"><![CDATA[字符串转数组对象12345678910111213141516171819202122232425// 字符串数据结构var str = '&#123;"fileId":20945,"folderId":1,"uploadId":1401,"name":"2019-7-10 10-25-49.JPG","urlName":"6a957d583561508.JPG"&#125;,&#123;"fileId":20952,"folderId":1,"uploadId":1409,"name":"Koala.jpg","urlName":"4b6981873d21c8e.jpg"&#125;,&#123;"fileId":20951,"folderId":1,"uploadId":1408,"name":"Koala.jpg","urlName":"e7a9380346ce52a.jpg"&#125;' function setAttachmentValue(data) &#123; if (data) &#123; var _dataStr = data.substring(0, data.length).replace(/&#125;,&#123;/g, '&#125;,,&#123;').replace(/\[/g, '').replace(/\]/g, ''); if (_dataStr.indexOf(',,') &gt; -1) &#123; data = _dataStr.split(",,"); &#125; else &#123; var _array = new Array(); var _objStr = _dataStr.replace(/\[/g, '').replace(/\]/g, ''); _array.push(_objStr) data = _array &#125; for (var u = 0; u &lt; data.length; u++) &#123; if (data[u] &amp;&amp; data[u].length &gt; 0) &#123; var attachmentObj = JSON.parse(data[u].substring(0, data[u].length)); data[u] = attachmentObj &#125; &#125; return data &#125; else &#123; return [] &#125; &#125;]]></content>
      <tags>
        <tag>前端</tag>
        <tag>javascript</tag>
      </tags>
  </entry>
</search>
